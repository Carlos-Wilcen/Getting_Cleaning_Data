a<- available.packages()
head(rownames(a), 3)
search()
install("KernSmooth")
install.packages("KernSmooth")
library()
library(KernSmooth)
getwd()
getwd()
install.packages("swirl")
library(swirl)
swirl()
library(swirl)
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_sqrt
my_div
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555.z)
c(z,555,z)
z * 2 + 100
my_sqrt<-z-1
my_sqrt<-sqrt(z-1)
my_sqrt
my_dic<-z/my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
library(swirl)
ls()
rm(list=ls())
swilr()
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length()
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times =10)
rep(c(0,1,2),each=10)
num_vect(0.5,55,-10,6)
num_vect<-0.5,55,-10,6
num_vect(0.5,55,-10,6)
num_vect<-(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Carlos-Wilcen")
my_name
paste(my_name,collapse=" ")
paste("hello", "world", sep = " ")
paste("hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect2, vect)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5)
identical(my_matrix2, my_matrix)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
caolnames(my_data)
colnames(my_data)
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
True == True
TRUE == TRUE
(FALSE == TUE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5!=7
!(5=7)
!(5 == 7)
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
al(ints > 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors)
sapply(flag_colors)
sapply(flag_colors, sum)
saspply(flag_colors, mean)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals, sum)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
library(swirl)
swirl
swirl()
1
library(swirl)
swirl()
class(cls_list)
swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmass, flags$red, summary)
tapply(flags$population, flags$lansmass, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 15)
above10 <- function(x, n = 10) {
use <- x > 10
x[use]
}
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
pollutantmean <- function(directory, pollutant, id=1:332 ) {
files_full<-list.files(directory, full.name=TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat_subset <- subset(dat, select=pollutant)
head(as.vector(dat_subset))
return(colMeans(dat_subset, na.rm=T))
}
pollutantmean("specdata", "sulfate", 1:10)
library(datasets)
data(iris)
?iris
names(iris)
iris
data2 <- subset(iris, Species == "virginica")
mean(data2$Sepal.Length)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
printmessage <- function(x){
if (x > 5)
print("mayor")
else
print("menor")
}
x
printmessage(8)
printmessage(x)
printmessage <- function(x){
if (x > 5)
print("mayor")
else
print("menor")
invesible(x)
}
printmessage(x)
printmessage <- function(x){
if (x > 5)
print("mayor")
else
print("menor")
invisible(x)
}
printmessage(8)
debug(ls)
ls()
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
swilr()
library(swilr)
library (swirl)
swirl()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
objtect.size(plants)
objetc.size(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
satr(plants)
str(plants)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS()
letters
LETTERS
sample(LETTERS)
sample(1:100, 1, replace = TRUE, prob = c(0.3, 0.7))
sample(1:100, 0, replace = TRUE, prob = c(0.3, 0.7))
sample(1:100, C(0, 1), replace = TRUE, prob = c(0.3, 0.7))
sample(1:100, c(0, 1), replace = TRUE, prob = c(0.3, 0.7))
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(c(1, 2), size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <-Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays (d1)
months(t1)
quarters(t2)
t3 <- c("October 17, 1986 08:24")
t3 <- ("October 17, 1986 08:24")
info()
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile="./data/housing.csv", method="curl")
housing <- read.table("./data/housing.csv", sep=",", header=TRUE)
sum(!is.na(housing$VAL[housing$VAL==24]))
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(swirl)
swirl()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
setwd("~/Documents/Documentos/Coursera/Get_Clean_Data/Samsung_Data")
source("run_analysis.R")
source("run_analysis.R")
source("run_analysis.R")
